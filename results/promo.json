{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 215,
      "offset": 66,
      "length": 2,
      "code": {
        "startLine": 213,
        "length": 2,
        "offset": 128,
        "surroundingCode": "        :return: Track id, None if not a track url\n        \"\"\"\n        track_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/track\\/(\\w+)')\n\n        match = track_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "1543b295df5a5404d5aaba4317208a62c5859a45c6e28617c53765b46700a29f"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 345,
      "offset": 72,
      "length": 2,
      "code": {
        "startLine": 343,
        "length": 2,
        "offset": 96,
        "surroundingCode": "            return None\n\n        match = re.match(r'^(?:https?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:\\/\\n]+)', url_info['webpage_url'])\n\n        track.title = url_info['title']"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "2abefca8aac1c5a61b6be27fa3547ba05c68835d37ae996aef83717d0a86eb30"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 215,
      "offset": 44,
      "length": 2,
      "code": {
        "startLine": 213,
        "length": 2,
        "offset": 106,
        "surroundingCode": "        :return: Track id, None if not a track url\n        \"\"\"\n        track_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/track\\/(\\w+)')\n\n        match = track_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "36eacccf38589be7626348e7ef5fad933553ed75b2e18c899b371371f165bcad"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 215,
      "offset": 73,
      "length": 2,
      "code": {
        "startLine": 213,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        :return: Track id, None if not a track url\n        \"\"\"\n        track_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/track\\/(\\w+)')\n\n        match = track_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "53305b5207c6363bb1d42c5c67aa729e035c7998d2bceaeee464bbbe3e4da1e1"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 345,
      "offset": 39,
      "length": 2,
      "code": {
        "startLine": 343,
        "length": 2,
        "offset": 63,
        "surroundingCode": "            return None\n\n        match = re.match(r'^(?:https?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:\\/\\n]+)', url_info['webpage_url'])\n\n        track.title = url_info['title']"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "5ce1e5a7867eb9d1c41862e25789339aaaad4d91dcbda1807996aeff7a71c3cc"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 247,
      "offset": 46,
      "length": 2,
      "code": {
        "startLine": 245,
        "length": 2,
        "offset": 108,
        "surroundingCode": "        :return: Album id, None if not a album url\n        \"\"\"\n        album_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/album\\/(\\w+)')\n\n        match = album_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "794c4f2b0b9c68526ba6c3b31ba6545cf462455bb5a9e53c593af76d5d7f2b39"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 247,
      "offset": 44,
      "length": 2,
      "code": {
        "startLine": 245,
        "length": 2,
        "offset": 106,
        "surroundingCode": "        :return: Album id, None if not a album url\n        \"\"\"\n        album_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/album\\/(\\w+)')\n\n        match = album_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "7fa9b387be485f66f23e244ebedbbf21b937ef12567bee0dbad22cdbd9b5b4c5"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 215,
      "offset": 46,
      "length": 2,
      "code": {
        "startLine": 213,
        "length": 2,
        "offset": 108,
        "surroundingCode": "        :return: Track id, None if not a track url\n        \"\"\"\n        track_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/track\\/(\\w+)')\n\n        match = track_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "9d089a0aa1e5e7dc9b16371726295a4cfcfd6abf2b4fc6a2ba0a91c90b871886"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 247,
      "offset": 66,
      "length": 2,
      "code": {
        "startLine": 245,
        "length": 2,
        "offset": 128,
        "surroundingCode": "        :return: Album id, None if not a album url\n        \"\"\"\n        album_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/album\\/(\\w+)')\n\n        match = album_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "9dfb156c71813134c7e27dc6a6c3f54463269e5a5d02efeaec82b55cc44d1cb4"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 247,
      "offset": 73,
      "length": 2,
      "code": {
        "startLine": 245,
        "length": 2,
        "offset": 135,
        "surroundingCode": "        :return: Album id, None if not a album url\n        \"\"\"\n        album_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/album\\/(\\w+)')\n\n        match = album_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "ac618af7c29b30f24f4f1228a3c872dd82d1c293f7ca7991c721816a7a4a3517"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 231,
      "offset": 49,
      "length": 2,
      "code": {
        "startLine": 229,
        "length": 2,
        "offset": 117,
        "surroundingCode": "        :return: Playlist id, None if not a playlist url\n        \"\"\"\n        playlist_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/playlist\\/(\\w+)')\n\n        match = playlist_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "b831e0b84471ebbf783b75c0d7bff82b5f66273310c270dd180858ccfa915dba"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 231,
      "offset": 79,
      "length": 2,
      "code": {
        "startLine": 229,
        "length": 2,
        "offset": 147,
        "surroundingCode": "        :return: Playlist id, None if not a playlist url\n        \"\"\"\n        playlist_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/playlist\\/(\\w+)')\n\n        match = playlist_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "bcb6f1a033595ca8fcaea793ff3a47a40916e40c59be9e02ce4614b83b240751"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 231,
      "offset": 69,
      "length": 2,
      "code": {
        "startLine": 229,
        "length": 2,
        "offset": 137,
        "surroundingCode": "        :return: Playlist id, None if not a playlist url\n        \"\"\"\n        playlist_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/playlist\\/(\\w+)')\n\n        match = playlist_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "d6c4bf0da22175cb2c3c70c43849c128e312c71e318454622983bf01cc10cd96"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 345,
      "offset": 41,
      "length": 2,
      "code": {
        "startLine": 343,
        "length": 2,
        "offset": 65,
        "surroundingCode": "            return None\n\n        match = re.match(r'^(?:https?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:\\/\\n]+)', url_info['webpage_url'])\n\n        track.title = url_info['title']"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "ed736189e445cf8f10189ddfe9b461fab8d6078f5c1aa035ec8273dc302a15ac"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "severity": "High",
  "comment": "Redundant character escape `\\/` in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lava/source.py",
      "language": "Python",
      "line": 231,
      "offset": 47,
      "length": 2,
      "code": {
        "startLine": 229,
        "length": 2,
        "offset": 115,
        "surroundingCode": "        :return: Playlist id, None if not a playlist url\n        \"\"\"\n        playlist_url_rx = re.compile(r'https?:\\/\\/open\\.spotify\\.com\\/playlist\\/(\\w+)')\n\n        match = playlist_url_rx.match(url)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape"
  },
  "hash": "f4806f083c725eb7610fe75fa3a8291c21112710d3de9f78ca9833c260605baa"
}]}