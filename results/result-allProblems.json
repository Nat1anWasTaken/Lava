{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Package requirements 'PyNaCl==1.5.0', 'spotipy==2.23.0', 'beautifulsoup4==4.12.3', 'psutil==5.9.8', 'disnake==2.9.1', 'python-dotenv==1.0.1', 'yt-dlp==2023.12.30', 'colorlog', 'youtube-related', 'youtube-search', 'Lavalink.py', 'disnake-ext-paginator' are not satisfied",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "main.py",
      "language": "Python",
      "line": 1,
      "offset": 1,
      "length": 2547,
      "code": {
        "startLine": 1,
        "length": 2547,
        "offset": 0,
        "surroundingCode": "import asyncio\r\nimport json\r\nimport logging\r\nimport os\r\nfrom os import getenv\r\n\r\nfrom colorlog import ColoredFormatter\r\nfrom disnake import Intents, Streaming, Activity, Game, ActivityType\r\nfrom disnake.ext.commands import CommandSyncFlags\r\nfrom dotenv import load_dotenv\r\n\r\nfrom lava.bot import Bot\r\n\r\n\r\ndef main():\r\n    load_dotenv(\"stack.env\")\r\n\r\n    setup_logging()\r\n\r\n    main_logger = logging.getLogger(\"lava.main\")\r\n\r\n    loop = asyncio.new_event_loop()\r\n\r\n    activity = set_activity()    \r\n\r\n    bot = Bot(\r\n        logger=main_logger,\r\n        command_prefix=getenv(\"PREFIX\", \"l!\"),\r\n        intents=Intents.all(),\r\n        loop=loop,\r\n        activity=activity,\r\n        command_sync_flags=CommandSyncFlags.default(),\r\n    )\r\n\r\n    bot.i18n.load(\"locale/\")\r\n\r\n    load_extensions(bot)\r\n\r\n    bot.run(os.environ[\"TOKEN\"])\r\n\r\n\r\ndef set_activity():\r\n    with open(\"configs/activity.json\", \"r\") as f:\r\n        activity = json.load(f)\r\n\r\n    status = activity[\"status\"]\r\n    name = activity[\"name\"]\r\n\r\n    match status:\r\n        case \"playing\":\r\n            activity = Game(name=name)\r\n        case \"listening\":\r\n            activity = Activity(type=ActivityType.listening, name=name)\r\n        case \"streaming\":\r\n            activity = Streaming(name=name, url=activity[\"url\"])\r\n        case \"watching\":\r\n            activity = Activity(type=ActivityType.watching, name=name)\r\n\r\n    return activity\r\n\r\n\r\ndef setup_logging():\r\n    \"\"\"\r\n    Set up the loggings for the bot\r\n    :return: None\r\n    \"\"\"\r\n    formatter = ColoredFormatter(\r\n        '%(asctime)s %(log_color)s [%(levelname)s] %(message)s',\r\n        datefmt='%Y-%m-%d %H:%M:%S',\r\n        log_colors={\r\n            'DEBUG': 'cyan',\r\n            'INFO': 'white',\r\n            'WARNING': 'yellow',\r\n            'ERROR': 'red',\r\n            'CRITICAL': 'bold_red',\r\n        }\r\n    )\r\n\r\n    stream_handler = logging.StreamHandler()\r\n    stream_handler.setLevel(logging.INFO)\r\n    stream_handler.setFormatter(formatter)\r\n\r\n    file_handler = logging.FileHandler(filename=\"lava.log\", encoding=\"utf-8\", mode=\"w\")\r\n    file_handler.setLevel(logging.DEBUG)\r\n    file_handler.setFormatter(formatter)\r\n\r\n    logging.basicConfig(\r\n        handlers=[stream_handler, file_handler], level=logging.INFO\r\n    )\r\n\r\n\r\ndef load_extensions(bot: Bot) -> Bot:\r\n    \"\"\"\r\n    Load extensions in extensions.json file\r\n    :param bot: The bot to load the extensions to\r\n    :return: The bot\r\n    \"\"\"\r\n    with open(\"extensions.json\", \"r\") as f:\r\n        extensions = json.load(f)\r\n\r\n    for extension in extens"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "e4de7e2c7356cabe1984483987c951c9cf7d7d353ab1f28e386ccfde599b5f52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (173 \\> 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lava/cogs/commands.py",
      "language": "Python",
      "line": 101,
      "offset": 121,
      "length": 1,
      "code": {
        "startLine": 99,
        "length": 1,
        "offset": 162,
        "surroundingCode": "        locale = str(interaction.locale)\n\n        await interaction.response.send_message(embed=InfoEmbed(self.bot.get_text(\"command.ping.title\", locale, \"機器人延遲\"), description=f\"{round(self.bot.latency * 1000)}ms\"))\n    \n    @commands.slash_command("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection"
  },
  "hash": "d228eb2c7e3aa44422e4fd9d64b2eefcd1518d90b1487683145dfb900cb3527c"
}]}